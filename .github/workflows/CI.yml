name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn clean install

   # - name: Run Tests
   #   run: mvn test

   # - name: Package application
   #   run: mvn package

    - name: Build Docker image
      run: docker build -t takkadapelly/springboot:latest .

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image
      run: docker push takkadapelly/springboot:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensures deployment runs after build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Ensure Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker aishwar
          fi

          # Pull Docker image and run container
          echo "Pulling Docker image..."
          sudo docker pull takkadapelly/springboot:latest

          # Check if the container is running
          if [ "$(sudo docker ps -q -f name=my-app)" ]; then
            echo "Stopping and removing existing container..."
            sudo docker stop my-app
            sudo docker rm my-app
          elif [ "$(sudo docker ps -aq -f name=my-app)" ]; then
            # If the container exists but is not running
            echo "Removing stopped container..."
            sudo docker rm springboot
          fi

          # Run new container
          echo "Running new container..."
          sudo docker run -d -p 8080:8080 --name my-app takkadapelly/springboot:latest
      timeout: 30s
      command_timeout: 10m
      debug: false
